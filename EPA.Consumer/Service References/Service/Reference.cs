//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EPA.Consumer.Service {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/ChickenService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="COMPANY", Namespace="http://schemas.datacontract.org/2004/07/EPA.Models")]
    [System.SerializableAttribute()]
    public partial class COMPANY : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CODEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int COMPANY_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DESCRIPTIONField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EMAILField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FAXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KEYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PA_REFERENCEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PHONE1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PHONE2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ROW_VERSIONField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CODE {
            get {
                return this.CODEField;
            }
            set {
                if ((object.ReferenceEquals(this.CODEField, value) != true)) {
                    this.CODEField = value;
                    this.RaisePropertyChanged("CODE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int COMPANY_ID {
            get {
                return this.COMPANY_IDField;
            }
            set {
                if ((this.COMPANY_IDField.Equals(value) != true)) {
                    this.COMPANY_IDField = value;
                    this.RaisePropertyChanged("COMPANY_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DESCRIPTION {
            get {
                return this.DESCRIPTIONField;
            }
            set {
                if ((object.ReferenceEquals(this.DESCRIPTIONField, value) != true)) {
                    this.DESCRIPTIONField = value;
                    this.RaisePropertyChanged("DESCRIPTION");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EMAIL {
            get {
                return this.EMAILField;
            }
            set {
                if ((object.ReferenceEquals(this.EMAILField, value) != true)) {
                    this.EMAILField = value;
                    this.RaisePropertyChanged("EMAIL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FAX {
            get {
                return this.FAXField;
            }
            set {
                if ((object.ReferenceEquals(this.FAXField, value) != true)) {
                    this.FAXField = value;
                    this.RaisePropertyChanged("FAX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string KEY {
            get {
                return this.KEYField;
            }
            set {
                if ((object.ReferenceEquals(this.KEYField, value) != true)) {
                    this.KEYField = value;
                    this.RaisePropertyChanged("KEY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PA_REFERENCE {
            get {
                return this.PA_REFERENCEField;
            }
            set {
                if ((this.PA_REFERENCEField.Equals(value) != true)) {
                    this.PA_REFERENCEField = value;
                    this.RaisePropertyChanged("PA_REFERENCE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PHONE1 {
            get {
                return this.PHONE1Field;
            }
            set {
                if ((object.ReferenceEquals(this.PHONE1Field, value) != true)) {
                    this.PHONE1Field = value;
                    this.RaisePropertyChanged("PHONE1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PHONE2 {
            get {
                return this.PHONE2Field;
            }
            set {
                if ((object.ReferenceEquals(this.PHONE2Field, value) != true)) {
                    this.PHONE2Field = value;
                    this.RaisePropertyChanged("PHONE2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ROW_VERSION {
            get {
                return this.ROW_VERSIONField;
            }
            set {
                if ((this.ROW_VERSIONField.Equals(value) != true)) {
                    this.ROW_VERSIONField = value;
                    this.RaisePropertyChanged("ROW_VERSION");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IJordanEPAService")]
    public interface IJordanEPAService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJordanEPAService/GetData", ReplyAction="http://tempuri.org/IJordanEPAService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJordanEPAService/GetData", ReplyAction="http://tempuri.org/IJordanEPAService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJordanEPAService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IJordanEPAService/GetDataUsingDataContractResponse")]
        EPA.Consumer.Service.CompositeType GetDataUsingDataContract(EPA.Consumer.Service.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJordanEPAService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IJordanEPAService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<EPA.Consumer.Service.CompositeType> GetDataUsingDataContractAsync(EPA.Consumer.Service.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJordanEPAService/CompanyFetch", ReplyAction="http://tempuri.org/IJordanEPAService/CompanyFetchResponse")]
        EPA.Consumer.Service.COMPANY CompanyFetch(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJordanEPAService/CompanyFetch", ReplyAction="http://tempuri.org/IJordanEPAService/CompanyFetchResponse")]
        System.Threading.Tasks.Task<EPA.Consumer.Service.COMPANY> CompanyFetchAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJordanEPAService/CompanyFetchTest", ReplyAction="http://tempuri.org/IJordanEPAService/CompanyFetchTestResponse")]
        string CompanyFetchTest(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJordanEPAService/CompanyFetchTest", ReplyAction="http://tempuri.org/IJordanEPAService/CompanyFetchTestResponse")]
        System.Threading.Tasks.Task<string> CompanyFetchTestAsync(string key);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IJordanEPAServiceChannel : EPA.Consumer.Service.IJordanEPAService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class JordanEPAServiceClient : System.ServiceModel.ClientBase<EPA.Consumer.Service.IJordanEPAService>, EPA.Consumer.Service.IJordanEPAService {
        
        public JordanEPAServiceClient() {
        }
        
        public JordanEPAServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public JordanEPAServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JordanEPAServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JordanEPAServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public EPA.Consumer.Service.CompositeType GetDataUsingDataContract(EPA.Consumer.Service.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<EPA.Consumer.Service.CompositeType> GetDataUsingDataContractAsync(EPA.Consumer.Service.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public EPA.Consumer.Service.COMPANY CompanyFetch(string key) {
            return base.Channel.CompanyFetch(key);
        }
        
        public System.Threading.Tasks.Task<EPA.Consumer.Service.COMPANY> CompanyFetchAsync(string key) {
            return base.Channel.CompanyFetchAsync(key);
        }
        
        public string CompanyFetchTest(string key) {
            return base.Channel.CompanyFetchTest(key);
        }
        
        public System.Threading.Tasks.Task<string> CompanyFetchTestAsync(string key) {
            return base.Channel.CompanyFetchTestAsync(key);
        }
    }
}
